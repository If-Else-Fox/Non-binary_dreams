import random

def clamp(x):
    return max(-2, min(2, x))

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–µ—Å–æ–≤
def generate_balanced_weights():
    flags = ['A', 'B', 'C', 'D', 'Z']
    variables = ['a', 'b', 'c', 'd']
    weights = {flag: {} for flag in flags}

    # –ö–∞–∂–¥—ã–π —Ñ–ª–∞–≥ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç 2‚Äì4 –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    for flag in flags:
        count = random.randint(2, 4)
        chosen_vars = random.sample(variables, count)
        for var in chosen_vars:
            weights[flag][var] = round(random.uniform(0.3, 0.9), 2)

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–∞–∂–¥–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —É—á–∞—Å—Ç–≤—É–µ—Ç —Ö–æ—Ç—è –±—ã –≤ 2 —Ñ–ª–∞–≥–∞—Ö
    variable_coverage = {var: 0 for var in variables}
    for flag_map in weights.values():
        for var in flag_map:
            variable_coverage[var] += 1

    for var, count in variable_coverage.items():
        if count < 2:
            needed = 2 - count
            possible_flags = [f for f in flags if var not in weights[f]]
            chosen_flags = random.sample(possible_flags, min(needed, len(possible_flags)))
            for flag in chosen_flags:
                weights[flag][var] = round(random.uniform(0.3, 0.9), 2)

    return weights

# –û–¥–∏–Ω –∑–∞–ø—É—Å–∫ —Å –∞–Ω—Ç–∏–∑–∞–ª–∏–ø–∞–Ω–∏–µ–º –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–º —Å–±—Ä–æ—Å–æ–º
def run_sequence(steps, weights, noise_level=0.1, max_stick=15):
    state = {'a': 0, 'b': 0, 'c': 0, 'd': 0}
    stick_count = {'a': 0, 'b': 0, 'c': 0, 'd': 0}

    for _ in range(steps):
        v = random.randint(-2, 2)
        f = random.choice(list(weights.keys()))

        # –ù–µ–º–Ω–æ–≥–æ —à—É–º–∏–º –≤–µ—Å–∞ (–¥–∏–Ω–∞–º–∏–∫–∞)
        dynamic_weights = {
            key: w + random.uniform(-w * noise_level, w * noise_level)
            for key, w in weights[f].items()
        }

        all_stuck = all(abs(state[k]) == 2 for k in state)

        for key, weight in dynamic_weights.items():
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ª–∏–ø–∞–Ω–∏—è
            if abs(state[key]) == 2:
                stick_count[key] += 1
            else:
                stick_count[key] = 0

            # –°–∞–º–æ–æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ
            if stick_count[key] >= max_stick:
                if state[key] > 0:
                    state[key] -= 0.5
                elif state[key] < 0:
                    state[key] += 0.5
                state[key] = clamp(state[key])
                continue

            # üå¨ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–±—Ä–æ—Å, –µ—Å–ª–∏ –≤—Å—ë –∑–∞–ª–∏–ø–ª–æ
            if all_stuck:
                if state[key] > 0:
                    state[key] -= 0.2
                elif state[key] < 0:
                    state[key] += 0.2
                state[key] = clamp(state[key])
                continue

            # –û–±—ã—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            new_value = state[key] + v * weight
            state[key] = clamp(new_value)

    return tuple(round(v, 2) for v in state.values())

# –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
def experiment(runs=1_000_000, steps=100):
    weights = generate_balanced_weights()
    print("–°–ª—É—á–∞–π–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Å–∞:")
    for flag, mapping in weights.items():
        print(f"  {flag}: {mapping}")

    results = set()
    clamped_count = 0

    for _ in range(runs):
        result = run_sequence(steps, weights)
        results.add(result)
        if any(abs(v) >= 2 for v in result):
            clamped_count += 1

    print("\n–†–ï–ó–£–õ–¨–¢–ê–¢ –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê")
    print(f"–í—Å–µ–≥–æ –∑–∞–ø—É—Å–∫–æ–≤ —Ü–µ–ø–æ—á–µ–∫: {runs}")
    print(f"–®–∞–≥–æ–≤ –≤ –∫–∞–∂–¥–æ–π —Ü–µ–ø–æ—á–∫–µ: {steps}")
    print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {len(results)}")
    print(f"–ß–∏—Å–ª–æ —Å–ª—É—á–∞–µ–≤, —É–ø–µ—Ä—à–∏—Ö—Å—è –≤ –ø—Ä–µ–¥–µ–ª [-2,2]: {clamped_count}")
    print(f"–î–æ–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {len(results)/runs*100:.2f}%")

# –°—Ç–∞—Ä—Ç
if __name__ == "__main__":
    experiment()
